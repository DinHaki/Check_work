import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaDocument, InputMediaVideo
from telegram import KeyboardButton, ReplyKeyboardMarkup
from datetime import timedelta, datetime


from database_handler import DataBase


bot = telebot.TeleBot('6365731257:AAH49Z8Mu14LX2YMVCGSWZwXdDe9mhxSN88')
group_link = 't.me/poloies'
chat_id_group = '@poloies'


db = DataBase(db_file='datebase.db')
support_chat_id = -4159845515
main_chat_id = -1001925020959
price_step = 50
history_limit = 10


#__________________________–ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è___________________________#
markup_keyboard = InlineKeyboardMarkup()
btn1 = InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å", callback_data="balance")
markup_keyboard.row(btn1)  
btn2 = InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤ —Å –ø—Ä–∏–Ω—è—Ç–∏–µ–º —É—á–∞—Å—Ç–∏—è", callback_data="history")
markup_keyboard.row(btn2) 
btn3 = InlineKeyboardButton("–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="report")
markup_keyboard.row(btn3) 
btn4 = InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞",callback_data="rules")
btn5 = InlineKeyboardButton("–ü–æ–º–æ—â—å",callback_data="help")
markup_keyboard.row(btn4,btn5) 

#__________________________–ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞___________________________#  
markup_administrator = InlineKeyboardMarkup()
markup_administrator.add(InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤", callback_data = "lots_history"))
markup_administrator.add(InlineKeyboardButton("–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data = "report"))
markup_administrator.add(InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ª–æ—Ç", callback_data = "create"))
markup_administrator.add(InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å", callback_data = "balance"))
markup_administrator.add(InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤ —Å –ø—Ä–∏–Ω—è—Ç–∏–µ–º —É—á–∞—Å—Ç–∏—è", callback_data = "history"))
markup_administrator.add(InlineKeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ –ª–æ—Ç–∞", callback_data = "lots_deleting"))

#__________________________–ö–Ω–æ–ø–∫–∏ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞___________________________#  
markup_seper_adm = InlineKeyboardMarkup()
markup_seper_adm.add(InlineKeyboardButton("–í—ã–¥–∞—Ç—å –ø–æ–ª–Ω–æ–º–æ—á–∏—è", callback_data = "invate"))
markup_seper_adm.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data = "check"))
markup_seper_adm.add(InlineKeyboardButton("–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –î–ö–ü", callback_data = "create_document"))

#__________________________–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤___________________________# 
markup_main_menu = InlineKeyboardMarkup()
markup_main_menu.add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data = "back"))


#__________________________–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –∫ –±–æ—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ—Ç-–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã___________________________# 
@bot.message_handler(commands=['start'])
def start(message):
    if message.text == '/start':
        if message.chat.id == support_chat_id:
            pass
        elif message.chat.id == main_chat_id:
            pass

        else:
            user_id = message.from_user.id
            user_name = message.from_user.username

            if not db.is_user_exists(user_id):
                db.add_user(user_id, user_name)
                user_type = 'user'
            else:
                user_type = db.get_user_type(user_id)
            
            if user_type == 'user':
                markup = markup_keyboard
            elif user_type == 'admin':
                markup = markup_administrator
            elif user_type == 's_admin':
                markup = markup_seper_adm
                
            if user_type == 'blocked':
                bot.send_message(message.chat.id, '–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å @dinhaki', reply_markup=None)
            else:
                hello_text =  f"–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ @poloies –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ª–æ—Ç–∞–º–∏ ,–∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ö–æ–¥ –∞—É–∫—Ü–∏–æ–Ω–∞.–ê —Ç–∞–∫ –∂–µ –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ –±–∞–ª–∞–º–∏. –£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ ü§ù"
                bot.send_message(message.chat.id, hello_text, reply_markup=markup)
    else:
        lot_id =  int(message.text.split()[-1])
        
        max_bet = db.get_max_bet(lot_id)
        _, lot_name, lot_desc, lot_start_price, lot_geolocations, lot_medias, id_seller, _, _, _, _, _ = db.get_lot_info(lot_id)
        
        max_bet = db.get_max_bet(lot_id)
        if lot_start_price > max_bet:
            next_price = lot_start_price
        else:
            next_price = max_bet + price_step

        text =  f'{lot_name}\n{lot_desc}\n–ü—Ä–æ–¥–∞–≤–µ—Ü: @{db.get_user_name(id_seller)}\n–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞: {next_price}\n{lot_geolocations}'
        media_group_documents = []
        media_group = []
        media_list = lot_medias.split()
        for i in range(0, len(media_list), 2):
            file_type = media_list[i]
            file_id = media_list[i+1]
            if file_type == 'd':
                media_group_documents.append(InputMediaDocument(file_id, caption=''))
            elif file_type == 'p':
                media_group.append(InputMediaPhoto(file_id))
            elif file_type == 'v':
                media_group.append(InputMediaVideo(file_id))

        #__________________________–õ–æ—Ç –¥–ª—è –ª–∏—á–∫–∏___________________________# 
        markup_lot = InlineKeyboardMarkup()
        btn1 = (InlineKeyboardButton("‚è∞", callback_data = "time_to_end"))
        btn2 = (InlineKeyboardButton("‚Ñπ", callback_data = "info"))
        markup_lot.row(btn1,btn2) 
        markup_lot.add(InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data = f"pay_{lot_id}"))
        

        if media_group_documents:
            bot.send_media_group(message.from_user.id, media=media_group_documents)
        bot.send_media_group(message.from_user.id, media=media_group)
        bot.send_message(message.from_user.id, text, reply_markup=markup_lot)


#__________________________–û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–∞–Ω–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –î.–ö.–ü. –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º-–æ–º___________________________# 
@bot.callback_query_handler(func=lambda call: call.data=="create_document")
def create_document(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø—Ä–æ–¥–∞–≤—Ü–∞")
    return bot.register_next_step_handler(msg, get_user_name_seller)

def get_user_name_seller(message):
    user_name_seller = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–∫—É–ø–∞—Ç–µ–ª—è")
    return bot.register_next_step_handler(msg, get_user_name_customer, user_name_seller)

def get_user_name_customer(message, user_name_seller):
    user_name_customer = message.text

    user_id_seller = db.get_user_info(user_name_seller)[0]
    user_id_customer= db.get_user_info(user_name_customer)[0]

    bot.send_document(user_id_seller, open(r'C:\Users\admin\Desktop\Ekz\blank1_DKP.docx', 'rb'))
    bot.send_document(user_id_customer, open(r'C:\Users\admin\Desktop\Ekz\blank2_DKP.docx', 'rb'))
    bot.send_message(message.chat.id, f"–ü—Ä–æ–¥–∞–≤—Ü—É @{user_name_seller} –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é @{user_name_customer} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã")


#__________________________–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ª–æ—Ç–æ–≤ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞___________________________# 
@bot.callback_query_handler(func=lambda call: call.data=="history")
def show_history(call):
    user_id = call.message.chat.id
    
    history = db.get_history(user_id)[:history_limit]

    markup_history = InlineKeyboardMarkup()
    for lot_id in history:
        _, lot_name, lot_desc, _, _, _, id_seller, _, _, _, _, _ = db.get_lot_info(lot_id)
        seller_name = db.get_user_name(id_seller)
        markup_history.add(InlineKeyboardButton(f"@{seller_name} {lot_name} {lot_desc}"[:50] + " ...", callback_data=f"show_lot_{lot_id}"))

    


    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–æ—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å—Ç–∞–≤–∏–ª–∏ —Å—Ç–∞–≤–∫—É", reply_markup=markup_history)

#__________________________–û—Ç–∫—Ä—ã—Ç–∏–µ –ª–æ—Ç–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É –ª–æ—Ç–∞___________________________# 
@bot.callback_query_handler(func=lambda call: call.data[:8]=="show_lot")
def show_lot(call):
    user_id = call.message.chat.id
    lot_id = call.data[9:]
    max_bet = db.get_max_bet(lot_id)

    _, lot_name, lot_desc, lot_start_price, lot_geolocations, lot_medias, id_seller, _, _, _, _, _ = db.get_lot_info(lot_id)
        
    if lot_start_price > max_bet:
        next_price = lot_start_price
    else:
        next_price = max_bet + price_step

    text =  f'{lot_name}\n{lot_desc}\n–ü—Ä–æ–¥–∞–≤–µ—Ü: @{db.get_user_name(id_seller)}\n–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞: {next_price}\n{lot_geolocations}'
    media_group_documents = []
    media_group = []
    media_list = lot_medias.split()

    markup_lot = InlineKeyboardMarkup()
    btn1 = (InlineKeyboardButton("‚è∞", callback_data = "time_to_end"))
    btn2 = (InlineKeyboardButton("‚Ñπ", callback_data = "info"))
    markup_lot.row(btn1,btn2) 
    markup_lot.add(InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data = f"pay_{lot_id}"))


    for i in range(0, len(media_list), 2):
        file_type = media_list[i]
        file_id = media_list[i+1]
        if file_type == 'd':
            media_group_documents.append(InputMediaDocument(file_id, caption=''))
        elif file_type == 'p':
            media_group.append(InputMediaPhoto(file_id))
        elif file_type == 'v':
            media_group.append(InputMediaVideo(file_id))
    
    if media_group_documents:
        bot.send_media_group(user_id, media=media_group_documents)
    bot.send_media_group(user_id, media=media_group)
    bot.send_message(user_id, text, reply_markup=markup_lot)

#__________________________–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ª–æ—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–º–µ—â–∞–ª –∞–¥–º-–æ—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ª–æ—Ç–∞___________________________# 
@bot.callback_query_handler(func=lambda call: call.data in ["lots_history", "lots_deleting"])
def show_history(call):
    user_id = call.message.chat.id
    
    history = db.get_lots_history(user_id)[:history_limit]

    if call.data == "lots_history":
        markup_history = InlineKeyboardMarkup()
        for lot_id in history:
            _, lot_name, lot_desc, _, _, _, id_seller, _, _, _, _, _ = db.get_lot_info(lot_id)
            seller_name = db.get_user_name(id_seller)
            markup_history.add(InlineKeyboardButton(f"@{seller_name} {lot_name} {lot_desc}"[:50] + " ...", callback_data=f"show_lot_{lot_id}"))

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ä–∞–∑–º–µ—â–∞–ª–∏", reply_markup=markup_history)
    
    elif call.data == "lots_deleting":
        markup_history = InlineKeyboardMarkup()
        for lot_id in history:
            _, lot_name, lot_desc, _, _, _, id_seller, _, _, _, _, _ = db.get_lot_info(lot_id)
            seller_name = db.get_user_name(id_seller)
            markup_history.add(InlineKeyboardButton(f"@{seller_name} {lot_name} {lot_desc}"[:50] + " ...", callback_data=f"del_lot_{lot_id}"))
        
        text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ä–∞–∑–º–µ—â–∞–ª–∏. –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=markup_history)

#__________________________–£–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ª–æ—Ç–∞___________________________# 
@bot.callback_query_handler(func=lambda call: call.data[:7]=="del_lot")
def del_lot(call):
    lot_id = int(call.data[8:])

    message_id = db.get_lot_info(lot_id)[10]
    bot.delete_message(main_chat_id, message_id)

    media_messages_ids = db.get_lot_info(lot_id)[11]
    for m_id in list(map(int, media_messages_ids.split())):
        bot.delete_message(main_chat_id, m_id)

#__________________________–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã___________________________
@bot.callback_query_handler(func=lambda call: call.data[:3]=="pay")
def create_lot(call):
    lot_id = int(call.data[4:])
    #__________________________–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤___________________________# 
    markup_keyboard_trade = InlineKeyboardMarkup()
    btn1 = (InlineKeyboardButton("10", callback_data = "add_10"))
    btn2 = (InlineKeyboardButton("50", callback_data = "add_50"))
    btn3 = (InlineKeyboardButton("100", callback_data = "add_100"))
    markup_keyboard_trade.row(btn1,btn2,btn3) 
    btn4 = (InlineKeyboardButton("500", callback_data = "add_500"))
    btn5 = (InlineKeyboardButton("1000", callback_data = "add_1000"))
    btn6 = (InlineKeyboardButton("5000", callback_data = "add_5000"))
    markup_keyboard_trade.row(btn4,btn5,btn6) 
    btn7 = (InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data = "zero"))
    btn8 = (InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data = f"save_{lot_id}"))
    markup_keyboard_trade.row(btn7,btn8) 
    bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–µ\n–°—É–º–º–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å: 0", reply_markup=markup_keyboard_trade)

#__________________________–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –æ–∫–Ω–µ___________________________# 
@bot.callback_query_handler(func=lambda call: call.data[:3]=="add")
def add_to_sum(call):
    lot_id = int(call.message.reply_markup.keyboard[-1][-1].callback_data.split('_')[-1])
    #__________________________–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤___________________________# 
    markup_keyboard_trade = InlineKeyboardMarkup()
    btn1 = (InlineKeyboardButton("10", callback_data = "add_10"))
    btn2 = (InlineKeyboardButton("50", callback_data = "add_50"))
    btn3 = (InlineKeyboardButton("100", callback_data = "add_100"))
    markup_keyboard_trade.row(btn1,btn2,btn3) 
    btn4 = (InlineKeyboardButton("500", callback_data = "add_500"))
    btn5 = (InlineKeyboardButton("1000", callback_data = "add_1000"))
    btn6 = (InlineKeyboardButton("5000", callback_data = "add_5000"))
    markup_keyboard_trade.row(btn4,btn5,btn6) 
    btn7 = (InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data = "zero"))
    btn8 = (InlineKeyboardButton("–ü–æ–¥–¥–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data = f"save_{lot_id}"))
    markup_keyboard_trade.row(btn7,btn8)

    value_to_add = int(call.data[4:])
    current_sum = int(call.message.text.split()[-1])
    bot.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–µ\n–°—É–º–º–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å: {current_sum+value_to_add}", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup_keyboard_trade)

#__________________________–°–±—Ä–æ—Å —Å—É–º–º—ã –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 0___________________________# 
@bot.callback_query_handler(func=lambda call: call.data=="zero")
def clear_sum(call):
    lot_id = int(call.message.reply_markup.keyboard[-1][-1].callback_data.split('_')[-1])
    #__________________________–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤ –≤—Ç–æ—Ä–∞—è___________________________# 
    markup_keyboard_trade = InlineKeyboardMarkup()
    btn1 = (InlineKeyboardButton("10", callback_data = "add_10"))
    btn2 = (InlineKeyboardButton("50", callback_data = "add_50"))
    btn3 = (InlineKeyboardButton("100", callback_data = "add_100"))
    markup_keyboard_trade.row(btn1,btn2,btn3) 
    btn4 = (InlineKeyboardButton("500", callback_data = "add_500"))
    btn5 = (InlineKeyboardButton("1000", callback_data = "add_1000"))
    btn6 = (InlineKeyboardButton("5000", callback_data = "add_5000"))
    markup_keyboard_trade.row(btn4,btn5,btn6) 
    btn7 = (InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data = "zero"))
    btn8 = (InlineKeyboardButton("–ü–æ–¥–¥–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data = f"save_{lot_id}"))
    markup_keyboard_trade.row(btn7,btn8)

    bot.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–µ\n–°—É–º–º–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å: 0", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup_keyboard_trade)

#__________________________–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –∫ —Å–∞–º–æ—É –ª–æ—Ç—É___________________________# 
@bot.callback_query_handler(func=lambda call: call.data[:4]=="save")
def save_sum(call):
    user_id = int(call.message.chat.id)
    lot_id = int(call.message.reply_markup.keyboard[-1][-1].callback_data.split('_')[-1])
    current_sum = int(call.message.text.split()[-1])

    max_bet = db.get_max_bet(lot_id)
    _, lot_name, lot_desc, lot_start_price, lot_geolocations, lot_medias, id_seller, _, _, _, message_id, _ = db.get_lot_info(lot_id)

    if lot_start_price > max_bet:
        next_price = lot_start_price
    else:
        next_price = max_bet + price_step
    
    if current_sum < next_price:
        bot.edit_message_text(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ", chat_id=call.message.chat.id, message_id=call.message.message_id)
    else:
        bot.edit_message_text(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞ –Ω–∞ —Å—É–º–º—É: {current_sum}", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup_main_menu)
        db.add_bet(user_id, lot_id, current_sum)

        text =  f'{lot_name}\n{lot_desc}\n–ü—Ä–æ–¥–∞–≤–µ—Ü: @{db.get_user_name(id_seller)}\n–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞: {current_sum+price_step}\n{lot_geolocations}'

        markup_lot_informations = InlineKeyboardMarkup()
        btn1 = (InlineKeyboardButton("‚è∞", callback_data = "time_to_end"))
        btn2 = (InlineKeyboardButton("‚Ñπ", callback_data = "info"))
        markup_lot_informations.row(btn1,btn2) 
        markup_lot_informations.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç", url=f"http://t.me/qqwwwerrrtyyyy_bot?start={lot_id}")) 

        bot.edit_message_text(text, main_chat_id, message_id, reply_markup=markup_lot_informations)

#__________________________–°—É–ø–µ—Ä_–∞–¥–º–∏–Ω —á–µ–∫ –±–∞–ª–∞–Ω—Å–∞___________________________#
@bot.callback_query_handler(func=lambda call: call.data=="check")
def create_check_balance(call):    
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞")
    return bot.register_next_step_handler(msg, check)

def check(message):
    name_user = message.text
    balance = db.check_balance(name_user)
    bot.send_message(message.chat.id, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{name_user}, –±–∞–ª–∞–Ω—Å: {balance}")

#__________________________—á–µ–∫ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞___________________________#
@bot.callback_query_handler(func=lambda call: call.data=="balance")
def chek_user_balance(call):
    print(call.message.chat.username)
    name_user = call.message.chat.username
    balance = db.check_balance(name_user)
    bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = f"–í–∞—à –ë–∞–ª–∞–Ω—Å: {balance}", reply_markup=markup_main_menu)

#__________________________–í—ã–¥–∞—á–∞ –ø–æ–ª–Ω–æ–º–æ—á–∏–π –∞–¥-–æ—Ä–∞__________________________#
@bot.callback_query_handler(func=lambda call: call.data=="invate")
def create_new_status(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º—É —Ö–æ–¥–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø–æ–ª–Ω–æ–º–æ—á–∏—è") 
    return bot.register_next_step_handler(msg, get_nick_user)

def get_nick_user(message):
    nickname_user = message.text                                                                                     
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å (admin, blocked, user, support)")
    return bot.register_next_step_handler(msg, get_new_status, nickname_user)

def get_new_status(message, nickname_user):
    new_status = message.text
    bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{nickname_user} –≤—ã–¥–∞–Ω —Å—Ç–∞—Ç—É—Å: {new_status}")
    db.change_user_type(nickname_user, new_status)

#__________________________–°–æ–∑–¥–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º__________________________# 
@bot.callback_query_handler(func=lambda call: call.data=="report")
def create_report(call):
    user_id = call.message.chat.id
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    return bot.register_next_step_handler(msg, get_nickname_user, user_id)

def get_nickname_user(message, user_id):
    name_suspect = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã")
    return bot.register_next_step_handler(msg, get_comment_report, user_id, name_suspect)

def get_comment_report(message, user_id, name_suspect):
    comment_report = message.text
    bot.send_message(message.chat.id, "–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–µ")

    user_name = db.get_user_name(user_id)
    user_id_suspect = db.get_user_info(name_suspect)[0]
    reports_count = db.get_approved_reports_count(user_id_suspect)
    report_id = db.get_new_report_id()

    markup_support = InlineKeyboardMarkup()
    markup_support.add(InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"report_accept_{report_id}"))
    markup_support.add(InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"report_delete_{report_id}"))

    text =  f"""–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∂–∞–ª–æ–±—É: –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{name_suspect}\n–ñ–∞–ª–æ–±–∞: {comment_report}\n–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç {reports_count} –∂–∞–ª–æ–±"""
    message_id = bot.send_message(support_chat_id, text, reply_markup=markup_support).message_id

    db.create_report(user_id, user_id_suspect, comment_report, message_id)

#__________________________–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –∂–∞–ª–æ–±—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–µ—Ç—è–ª –≤ –ß.–°.__________________________# 
@bot.callback_query_handler(func=lambda call: call.data[:13] in ["report_accept", "report_delete"])
def process_report(call):
    report_id = int(call.data.split('_')[-1])
    _, _, user_id_suspect, _, _, message_id = db.get_report_info(report_id)

    if call.data[:13] == "report_accept":
        db.approve_report(report_id)
        user_name_suspect = db.get_user_name(user_id_suspect)
        reports_count = db.get_approved_reports_count(user_id_suspect)
        if reports_count >= 3:
            db.change_user_type(user_name_suspect, "blocked")
    bot.delete_message(support_chat_id, message_id)


#__________________________–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º___________________________# 
@bot.callback_query_handler(func=lambda call: call.data=="create")
def create_lot(call):
    user_id = call.message.chat.id
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞")
    return bot.register_next_step_handler(msg, get_lot_name, user_id)

def get_lot_name(message, user_id):
    lot_name = message.text
    if not lot_name:
        msg = bot.send_message(message.chat.id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞")
        return bot.register_next_step_handler(msg, get_lot_name, user_id)

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞")
    return bot.register_next_step_handler(msg, get_lot_desc, user_id, lot_name)

def get_lot_desc(message, user_id, lot_name):
    lot_desc = message.text
    if not lot_desc:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞")
        return bot.register_next_step_handler(msg, get_lot_desc, user_id, lot_name)
    
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ—Ç–∞")
    return bot.register_next_step_handler(msg, get_lot_starp_price, user_id, lot_name, lot_desc) 

def get_lot_starp_price(message, user_id, lot_name, lot_desc):
    lot_starp_price = message.text
    if not lot_starp_price.isnumeric():
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ—Ç–∞")
        return bot.register_next_step_handler(msg, get_lot_starp_price, user_id, lot_name, lot_desc) 
    
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å—Å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ª–æ—Ç–∞")
    return bot.register_next_step_handler(msg, get_lot_geolocations, user_id, lot_name, lot_desc, lot_starp_price) 

def get_lot_geolocations(message, user_id, lot_name, lot_desc, lot_starp_price):
    lot_geolocations = message.text
    if not lot_geolocations:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å—Å –ª–æ—Ç–∞")
        return bot.register_next_step_handler(msg, get_lot_geolocations, user_id, lot_name, lot_desc, lot_starp_price) 
    
    msg = bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –≤ —á–∞—Ç —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –ª–æ—Ç–∞")
    return bot.register_next_step_handler(msg, get_lot_medias, user_id, lot_name, lot_desc, lot_starp_price, lot_geolocations) 

def get_lot_medias(message, user_id, lot_name, lot_desc, lot_starp_price, lot_geolocations):
    lot_medias = ' '

    if message.document:
        lot_medias += f'd {message.document.file_id} '
    elif message.photo:
        lot_medias += f'p {message.photo[-1].file_id} '
    elif message.video:
        lot_medias += f'v {message.video.file_id} '
    
    if ' v ' in lot_medias or ' p ' in lot_medias:
        msg = bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –≤ —á–∞—Ç –µ—â–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –ª–æ—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–æ–ø', —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞")
    else:
        msg = bot.send_message(message.chat.id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è–±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
    return bot.register_next_step_handler(msg, get_lot_medias_next, user_id, lot_name, lot_desc, lot_starp_price, lot_geolocations, lot_medias) 

def get_lot_medias_next(message, user_id, lot_name, lot_desc, lot_starp_price, lot_geolocations, lot_medias):
    if message.text == '—Å—Ç–æ–ø':
        user_name = db.get_user_name(user_id)

        text =  f'{lot_name}\n{lot_desc}\n–ü—Ä–æ–¥–∞–≤–µ—Ü: @{user_name}\n–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞: {lot_starp_price}\n{lot_geolocations}'
        media_group_documents = []
        media_group = []
        media_list = lot_medias.split()
        for i in range(0, len(media_list), 2):
            file_type = media_list[i]
            file_id = media_list[i+1]
            if file_type == 'd':
                media_group_documents.append(InputMediaDocument(file_id, caption=''))
            elif file_type == 'p':
                media_group.append(InputMediaPhoto(file_id, caption=text if not media_group else ''))
            elif file_type == 'v':
                media_group.append(InputMediaVideo(file_id, caption=text if not media_group else ''))
        
        if not media_group:
            msg = bot.send_message(message.chat.id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è–±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
            return bot.register_next_step_handler(msg, get_lot_medias_next, user_id, lot_name, lot_desc, lot_starp_price, lot_geolocations, lot_medias) 

        
        lot_id = db.create_lot(lot_name, lot_desc, lot_starp_price, lot_geolocations, lot_medias, user_id)

        #__________________________–ö–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏___________________________# 
        markup_support = InlineKeyboardMarkup()
        markup_support.add(InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"accept_{lot_id}"))
        markup_support.add(InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"delete_{lot_id}"))
        
        messages_ids = [support_chat_id]
        if media_group_documents:
            messages_ids.append(bot.send_media_group(support_chat_id, media=media_group_documents)[0].message_id)
        messages_ids.append(bot.send_media_group(support_chat_id, media=media_group)[0].message_id)
        messages_ids.append(bot.send_message(support_chat_id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–π –ª–æ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤", reply_markup=markup_support).message_id)

        db.fill_lot_messages_ids(lot_id, messages_ids)

    else:
        if message.document:
            lot_medias += f'd {message.document.file_id} '
        elif message.photo:
            lot_medias += f'p {message.photo[-1].file_id} '
        elif message.video:
            lot_medias += f'v {message.video.file_id} '

        if ' v ' in lot_medias or ' p ' in lot_medias:
            msg = bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –≤ —á–∞—Ç –µ—â–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –ª–æ—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–æ–ø', —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞")
        else:
            msg = bot.send_message(message.chat.id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è–±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
        return bot.register_next_step_handler(msg, get_lot_medias_next, user_id, lot_name, lot_desc, lot_starp_price, lot_geolocations, lot_medias) 

#__________________________–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º___________________________# 
@bot.callback_query_handler(func=lambda call: call.data[:6] in ["accept", "delete"])
def process_lot(call):
    lot_id = int(call.data[7:])

    messages_ids = db.get_messages_ids(lot_id)
    chat_id, messages_ids = messages_ids[0], messages_ids[1:]
    max_bet = db.get_max_bet(lot_id)

    if call.data[:6] == "accept":
        db.set_lot_is_approved(lot_id, True)
        
        _, lot_name, lot_desc, lot_start_price, lot_geolocations, lot_medias, id_seller, _, _, _, _, _ = db.get_lot_info(lot_id)
        
        if lot_start_price > max_bet:
            next_price = lot_start_price
        else:
            next_price = max_bet + price_step

        text =  f'{lot_name}\n{lot_desc}\n–ü—Ä–æ–¥–∞–≤–µ—Ü: @{db.get_user_name(id_seller)}\n–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞: {next_price}\n{lot_geolocations}'
        media_group_documents = []
        media_group = []
        media_list = lot_medias.split()
        for i in range(0, len(media_list), 2):
            file_type = media_list[i]
            file_id = media_list[i+1]
            if file_type == 'd':
                media_group_documents.append(InputMediaDocument(file_id, caption=''))
            elif file_type == 'p':
                media_group.append(InputMediaPhoto(file_id))
            elif file_type == 'v':
                media_group.append(InputMediaVideo(file_id))

        markup_lot_informations = InlineKeyboardMarkup()
        btn1 = (InlineKeyboardButton("‚è∞", callback_data = "time_to_end"))
        btn2 = (InlineKeyboardButton("‚Ñπ", callback_data = "info"))
        markup_lot_informations.row(btn1,btn2)
        markup_lot_informations.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç", url=f"http://t.me/qqwwwerrrtyyyy_bot?start={lot_id}")) 
        
        main_group_media_messages_ids = []
        if media_group_documents:
            main_group_media_messages_ids.append(bot.send_media_group(main_chat_id, media=media_group_documents)[0].message_id)
        main_group_media_messages_ids.append(bot.send_media_group(main_chat_id, media=media_group)[0].message_id)
        main_chat_message_id = bot.send_message(main_chat_id, text, reply_markup=markup_lot_informations).message_id

        db.fill_lot_main_group_message_id(lot_id, main_chat_message_id)
        db.fill_lot_main_group_media_messages_ids(lot_id, " ".join(list(map(str, main_group_media_messages_ids))))

    else:
        db.set_lot_is_approved(lot_id, False)
    
    for message_id in messages_ids:
        bot.delete_message(chat_id, message_id)

#__________________________–í—Ä–µ–º—è –¥–æ 23___________________________# 
@bot.callback_query_handler(func=lambda call: call.data=="time_to_end") 
def check_time_last_lot(call):
    datetime_now = datetime.now()
    if datetime_now.hour == 23:
        datetime_finish = datetime_now + timedelta(days=1)
    else:
        datetime_finish = datetime_now
    datetime_finish = datetime(datetime_finish.year, datetime_finish.month, datetime_finish.day, 23, 0, 0, 0)

    diff = (datetime_finish - datetime_now).seconds
    diff_hours = diff // 3600
    diff -= diff_hours * 3600
    diff_minutes = diff // 60
    diff -= diff_minutes * 60
    diff_seconds = diff

    bot.answer_callback_query(call.id, f"–û—Å—Ç–∞–ª–æ—Å—å {diff_hours} –ß–∞—Å–∞ {diff_minutes} –ú–∏–Ω—É—Ç {diff_seconds} –°–µ–∫—É–Ω–¥") 

#__________________________–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –∏–Ω—Ñ–æ___________________________# 
@bot.callback_query_handler(func=lambda call: call.data=="info") 
def check_button_info(call):
    bot.answer_callback_query(call.id, """–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤—ã–∫—É–ø–∏—Ç—å –ª–æ—Ç –≤ –¢–ï–ß–ï–ù–ò–ò –¢–†–Å–• –°–£–¢–û–ö""")       

#__________________________–í–Ω—É—Ç—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è___________________________#   
@bot.callback_query_handler(func=lambda call: True)
def lk_keyboard(call):
    if call.data == "rules":
        bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = '''–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤,–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫‚ÄºÔ∏è
–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤—ã–∫—É–ø–∏—Ç—å –ª–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –¢–†–Å–• –¥–Ω–µ–π,–ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞üî•
                         
–ù–ï –í–´–ö–£–ü –õ–û–¢–ê - –ü–ï–†–ú–ê–ù–ï–ù–¢–ù–´–ô –ë–ê–ù –í–û –í–°–ï–• –ù–£–ú–ò–ó–ú–ê–¢–ò–ß–ï–°–ö–ò–• –°–û–û–ë–©–ï–°–¢–í–ê–• –ò –ê–£–ö–¶–ò–û–ù–ê–•ü§¨
                         
–ß—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞,–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚è∞
–ê–Ω—Ç–∏—Å–Ω–∞–π–ø–µ—Ä - –°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–Ω–∞—è –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞,–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç
–ê—É–∫—Ü–∏–æ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç –≤–ø–µ—Ä—ë–¥ ‚ÄºÔ∏è
–†–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã,–∏—Ö –û—Ç–∑—ã–≤—ã —Å—É–º–∞—Ä–Ω–æ –¥–æ—Å—Ç–∏–≥–∞—é—Ç 10000+ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö.
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –§–æ—Ç–æ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø—Ä–æ–¥–∞–≤—Ü–∞.
                         
–°–ª—É—á–∞–π–Ω–æ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É?ü§î
–ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥–∞–≤—Ü—É‚ÄºÔ∏è
                         
–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π,—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–¥ —Ñ–æ—Ç–æ.
–õ–æ—Ç—ã –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ç—å, —ç–∫–æ–Ω–æ–º—è –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞ –ø–æ—á—Ç–µ.
–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä—ë—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã‚ÄºÔ∏è''', reply_markup = markup_main_menu)
        
    elif call.data == "back":
        user_id = call.message.chat.id
        user_type = db.get_user_type(user_id)

        if user_type == 'user':
            markup = markup_keyboard
        elif user_type == 'admin':
            markup = markup_administrator

        bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ @poloies –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ª–æ—Ç–∞–º–∏ ,–∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ö–æ–¥ –∞—É–∫—Ü–∏–æ–Ω–∞. –£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ ü§ù", reply_markup=markup)
  
    elif call.data == "help":
        bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã @poloies –æ–±–ª–µ–º–∞—Ö –∏–ª–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –ø–∏—à–∏—Ç–µ @dinhaki", reply_markup=markup_main_menu)
      

print("Ready")
bot.infinity_polling()
